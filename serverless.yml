service: poc-api-serverless-offline

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev 
  region: us-west-1
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.postsTableName}

custom:
  postsTableName: posts-table-${self:provider.stage}
  dynamodb:
    stages:
      - dev
    start:
      port: 8080
      migrate: true
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      cors: true
  serverless-offline:    
    resourcesRoutes: true 

plugins:
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline

functions:
  getPost:
    handler: api.getPost
    name: get-post
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: post/{postId}
          method: GET 
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource: !GetAtt PostsTable.Arn      
  createPost:
    handler: api.createPost
    name: create-post
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: post
          method: POST 
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt PostsTable.Arn      
  updatePost:
    handler: api.updatePost
    name: update-post
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: post/{postId}
          method: PUT 
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:updateItem"
        Resource: !GetAtt PostsTable.Arn 
  deletePost:
    handler: api.deletePost
    name: delete-post
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: post/{postId}
          method: DELETE 
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:deleteItem"
        Resource: !GetAtt PostsTable.Arn
  getAllPOst:
    handler: api.getAllPosts
    name: get-all-post
    memorySize: 128
    timeout: 5
    events:
      - http:
          path: posts
          method: GET 
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:Scan"
        Resource: !GetAtt PostsTable.Arn                 


resources:
  Resources:
    PostsTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.postsTableName}
        AttributeDefinitions:
          - AttributeName: postId
            AttributeType: S
        KeySchema:
          - AttributeName: postId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1